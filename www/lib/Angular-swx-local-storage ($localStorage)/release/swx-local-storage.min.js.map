{"version":3,"sources":["swx-local-storage.js"],"names":["angular","$localStorage","$window","$location","$cacheFactory","prefix","host","substring","indexOf","webStorage","localStorage","oneDay","cache","service","this","isLocalStorageAvailable","val","destroy","put","key","value","dataToStore","data","arguments","length","isNumber","expires","Date","getTime","setItem","toJson","get","item","fromJson","getItem","remove","removeItem","empty","clear","removeAll","Math","round","random","e","$inject","module","window"],"mappings":"CAAA,SAAUA,GAER,YA8BA,SAASC,GAAeC,EAASC,EAAWC,GAO1C,GAAIC,GAASF,EAAUG,OAAOC,UAAU,EAAGJ,EAAUG,OAAOE,QAAQ,MAAQ,IAC1EC,EAAaP,EAAQQ,aACrBC,EAAS,MACTC,EAAQR,EAAcC,EAAS,SAC/BQ,EAAUC,KACVC,GAA0B,CAmB5BF,GAAQR,OAAS,SAASW,GACxBX,EAASW,EAAM,IACfJ,EAAMK,UACNL,EAAQR,EAAcC,EAAS,UAmBjCQ,EAAQK,IAAM,SAASC,EAAKC,GAE1B,GAAIC,IAAgBC,KAAMF,EAY1B,OAVIG,WAAUC,OAAS,GAAKxB,EAAQyB,SAASF,UAAU,MACrDF,EAAYK,SAAU,GAAIC,OAAOC,UAAaL,UAAU,GAAKZ,GAG/DC,EAAMM,IAAIC,EAAKE,GAEXN,GACFN,EAAWoB,QAAQxB,EAASc,EAAKnB,EAAQ8B,OAAOT,GAAa,IAGxDD,GAkBTP,EAAQkB,IAAM,SAASZ,GAErB,GAAIa,EASJ,OAPIpB,GAAMmB,IAAIZ,GACZa,EAAOpB,EAAMmB,IAAIZ,GAEVJ,IACPiB,EAAOhC,EAAQiC,SAASxB,EAAWyB,QAAQ7B,EAASc,KAGjDa,EAIDA,EAAKN,SAAWM,EAAKN,SAAU,GAAIC,OAAOC,cAC5Cf,GAAQsB,OAAOhB,IAIjBP,EAAMM,IAAIC,EAAKa,GAERA,EAAKV,MAVH,QA2BXT,EAAQsB,OAAS,SAAShB,GACpBJ,GACFN,EAAW2B,WAAW/B,EAASc,GAEjCP,EAAMuB,OAAOhB,IAefN,EAAQwB,MAAQ,WACVtB,GACFN,EAAW6B,QAEb1B,EAAM2B,aAQR,WACE,GAAK9B,EAKH,IACE,GAAIU,GAAM,WAAaqB,KAAKC,MAAsB,IAAhBD,KAAKE,SACvCjC,GAAWoB,QAAQV,EAAK,QACxBV,EAAW2B,WAAWjB,GAExB,MAAOwB,GACL5B,GAA0B,MAV5BA,IAA0B,KAehCd,EAAc2C,SAAW,UAAW,YAAa,iBAWjD5C,EACG6C,OAAO,sBACPhC,QAAQ,gBAAiBZ,IAE3B6C,OAAO9C","file":"swx-local-storage.min.js","sourcesContent":["(function(angular) {\n\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name $localStorage\n   *\n   * @requires $window\n   * @requires $location\n   * @requires $cacheFactory\n   *\n   * @description Provides a key-value (string-object) storage, that is backed by localStorage with support for expiry (in days).\n   * Objects put or retrieved from this storage are automatically serialized or deserialized by angular's toJson/fromJson.\n   *\n   * @param {service} $window The $window service.\n   * @param {service} $location The $location service.\n   * @param {service} $cacheFactory The $cacheFactory service.\n   *\n   * @example\n   * ```js\n   * myApp.$inject = ['$localStorage'];\n   * function myApp($localStorage) {\n   *   // Your app code...\n   * }\n   *\n   * angular\n   *   .module('myApp', ['swxLocalStorage']);\n   * ```\n   *\n   * @ngInject\n   */\n  function $localStorage ($window, $location, $cacheFactory) {\n\n    /**\n     * @private\n     * @description\n     * Create a prefix to be used by $window.localStorage\n     */\n    var prefix = $location.host().substring(0, $location.host().indexOf('.')) + '_',\n      webStorage = $window.localStorage,\n      oneDay = 24 * 60 * 60 * 1000,\n      cache = $cacheFactory(prefix + 'cache'),\n      service = this,\n      isLocalStorageAvailable = true;\n\n    /**\n     * @ngdoc method\n     * @name $localStorage.prefix\n     * @methodOf $localStorage\n     *\n     * @description\n     * Overrides the default domain prefix.\n     *\n     * <strong>N.B. Destroys the existing cache.</strong>\n     *\n     * @param {string} val The string to add to the persistent data prefix.\n     *\n     * @example\n     * ```js\n     * $localStorage.prefix('myPrefix');\n     * ```\n     */\n    service.prefix = function(val) {\n      prefix = val + '_';\n      cache.destroy();\n      cache = $cacheFactory(prefix + 'cache');\n    };\n\n    /**\n     * @ngdoc method\n     * @name $localStorage.put\n     * @methodOf $localStorage\n     *\n     * @description Add data to storage\n     *\n     * @param {string} key The key to store the data with.\n     * @param {*} value The data to store.\n     * [@param {number} expires] (expiry in days)\n     *\n     * @example\n     * ```js\n     * $localStorage.put('myKey', { data: 'my_data' });\n     * ```\n     */\n    service.put = function(key, value) {\n\n      var dataToStore = { data: value };\n\n      if (arguments.length > 2 && angular.isNumber(arguments[2])) {\n        dataToStore.expires = new Date().getTime() + (arguments[2] * oneDay);\n      }\n\n      cache.put(key, dataToStore);\n\n      if (isLocalStorageAvailable) {\n        webStorage.setItem(prefix + key, angular.toJson(dataToStore, false));\n      }\n\n      return value;\n    };\n\n    /**\n     * @ngdoc method\n     * @name $localStorage.get\n     * @methodOf $localStorage\n     *\n     * @description Get data from localStorage, will return from session cache if possible for greater performance.\n     *\n     * @param {String} key The key of the stored data to retrieve.\n     * @returns {*} The value of the stored data or undefined.\n     *\n     * @example\n     * ```js\n     * $localStorage.get('myKey');\n     * ```\n     */\n    service.get = function(key) {\n\n      var item;\n\n      if (cache.get(key)) {\n        item = cache.get(key);\n      }\n      else if (isLocalStorageAvailable) {\n        item = angular.fromJson(webStorage.getItem(prefix + key));\n      }\n\n      if (!item) {\n        return void 0;\n      }\n\n      if (item.expires && item.expires < new Date().getTime()) {\n        service.remove(key);\n        return void 0;\n      }\n\n      cache.put(key, item);\n\n      return item.data;\n    };\n\n    /**\n     * @ngdoc method\n     * @name $localStorage.remove\n     * @methodOf $localStorage\n     *\n     * @descriotion Remove data from storage.\n     *\n     * @param {String} key The key of the stored data to remove.\n     *\n     * @example\n     * ```js\n     * $localStorage.remove('myKey');\n     * ```\n     */\n    service.remove = function(key) {\n      if (isLocalStorageAvailable) {\n        webStorage.removeItem(prefix + key);\n      }\n      cache.remove(key);\n    };\n\n    /**\n     * @ngdoc method\n     * @name $localStorage.empty\n     * @methodOf $localStorage\n     *\n     * @description Delete all data from session storage and localStorage.\n     *\n     * @example\n     * ```js\n     * $localStorage.empty();\n     * ```\n     */\n    service.empty = function() {\n      if (isLocalStorageAvailable) {\n        webStorage.clear();\n      }\n      cache.removeAll();\n    };\n\n    /**\n     * @private\n     * @description\n     * Check for $window.localStorage availability and functionality\n     */\n    (function() {\n      if (!webStorage) {\n        isLocalStorageAvailable = false;\n      }\n      else {\n        // Some browsers will return true when in private browsing mode so test to make sure it's functional.\n        try {\n          var key = 'swxTest_' + Math.round(Math.random() * 1e7);\n          webStorage.setItem(key, 'test');\n          webStorage.removeItem(key);\n        }\n        catch (e) {\n          isLocalStorageAvailable = false;\n        }\n      }\n    })();\n  }\n  $localStorage.$inject = ['$window', '$location', '$cacheFactory'];\n\n  /**\n   * @ngdoc overview\n   * @name swxLocalStorage\n   * @description\n   * $localStorage service for use in your AngularJS applications.\n   *\n   * Provides a key-value (string-object) storage, that is backed by localStorage with support for expiry (in days).\n   * Objects put or retrieved from this storage are automatically serialized or deserialized by angular's toJson/fromJson.\n   */\n  angular\n    .module('swxLocalStorage', [])\n    .service('$localStorage', $localStorage);\n\n})(window.angular);"],"sourceRoot":"/source/"}